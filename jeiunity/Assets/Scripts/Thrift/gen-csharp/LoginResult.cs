/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LoginResult : TBase
{
  private bool _loginOk;
  private string _userName;
  private string _comment;

  public bool LoginOk
  {
    get
    {
      return _loginOk;
    }
    set
    {
      __isset.loginOk = true;
      this._loginOk = value;
    }
  }

  public string UserName
  {
    get
    {
      return _userName;
    }
    set
    {
      __isset.userName = true;
      this._userName = value;
    }
  }

  public string Comment
  {
    get
    {
      return _comment;
    }
    set
    {
      __isset.comment = true;
      this._comment = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool loginOk;
    public bool userName;
    public bool comment;
  }

  public LoginResult() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Bool) {
            LoginOk = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            UserName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            Comment = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("LoginResult");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.loginOk) {
      field.Name = "loginOk";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(LoginOk);
      oprot.WriteFieldEnd();
    }
    if (UserName != null && __isset.userName) {
      field.Name = "userName";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UserName);
      oprot.WriteFieldEnd();
    }
    if (Comment != null && __isset.comment) {
      field.Name = "comment";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Comment);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LoginResult(");
    bool __first = true;
    if (__isset.loginOk) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LoginOk: ");
      __sb.Append(LoginOk);
    }
    if (UserName != null && __isset.userName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserName: ");
      __sb.Append(UserName);
    }
    if (Comment != null && __isset.comment) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Comment: ");
      __sb.Append(Comment);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

