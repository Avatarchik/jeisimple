/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jangi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnsLogin : TBase
  {
    private long _usn;
    private string _nickName;
    private string _comment;
    private int _level;
    private int _victoryCount;
    private int _defeatCount;

    public long Usn
    {
      get
      {
        return _usn;
      }
      set
      {
        __isset.usn = true;
        this._usn = value;
      }
    }

    public string NickName
    {
      get
      {
        return _nickName;
      }
      set
      {
        __isset.nickName = true;
        this._nickName = value;
      }
    }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int VictoryCount
    {
      get
      {
        return _victoryCount;
      }
      set
      {
        __isset.victoryCount = true;
        this._victoryCount = value;
      }
    }

    public int DefeatCount
    {
      get
      {
        return _defeatCount;
      }
      set
      {
        __isset.defeatCount = true;
        this._defeatCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool usn;
      public bool nickName;
      public bool comment;
      public bool level;
      public bool victoryCount;
      public bool defeatCount;
    }

    public AnsLogin() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Usn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NickName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Level = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                VictoryCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                DefeatCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AnsLogin");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.usn) {
          field.Name = "usn";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Usn);
          oprot.WriteFieldEnd();
        }
        if (NickName != null && __isset.nickName) {
          field.Name = "nickName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NickName);
          oprot.WriteFieldEnd();
        }
        if (Comment != null && __isset.comment) {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Comment);
          oprot.WriteFieldEnd();
        }
        if (__isset.level) {
          field.Name = "level";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Level);
          oprot.WriteFieldEnd();
        }
        if (__isset.victoryCount) {
          field.Name = "victoryCount";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(VictoryCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.defeatCount) {
          field.Name = "defeatCount";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DefeatCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AnsLogin(");
      bool __first = true;
      if (__isset.usn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Usn: ");
        __sb.Append(Usn);
      }
      if (NickName != null && __isset.nickName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NickName: ");
        __sb.Append(NickName);
      }
      if (Comment != null && __isset.comment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Comment: ");
        __sb.Append(Comment);
      }
      if (__isset.level) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Level: ");
        __sb.Append(Level);
      }
      if (__isset.victoryCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VictoryCount: ");
        __sb.Append(VictoryCount);
      }
      if (__isset.defeatCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DefeatCount: ");
        __sb.Append(DefeatCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
