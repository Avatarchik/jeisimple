/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jcasino
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HandInfo : TBase
  {
    private int _playerLocalId;
    private List<int> _hand;

    public int PlayerLocalId
    {
      get
      {
        return _playerLocalId;
      }
      set
      {
        __isset.playerLocalId = true;
        this._playerLocalId = value;
      }
    }

    public List<int> Hand
    {
      get
      {
        return _hand;
      }
      set
      {
        __isset.hand = true;
        this._hand = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool playerLocalId;
      public bool hand;
    }

    public HandInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              PlayerLocalId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Hand = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.ReadI32();
                  Hand.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HandInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.playerLocalId) {
        field.Name = "playerLocalId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PlayerLocalId);
        oprot.WriteFieldEnd();
      }
      if (Hand != null && __isset.hand) {
        field.Name = "hand";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Hand.Count));
          foreach (int _iter3 in Hand)
          {
            oprot.WriteI32(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HandInfo(");
      bool __first = true;
      if (__isset.playerLocalId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlayerLocalId: ");
        __sb.Append(PlayerLocalId);
      }
      if (Hand != null && __isset.hand) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hand: ");
        __sb.Append(Hand);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
