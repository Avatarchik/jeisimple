/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef jangi_TYPES_H
#define jangi_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace jangi {

struct JgC2S_MessageType {
  enum type {
    kUnknown = 0,
    kLogin = 1,
    kChannelInfo = 2,
    kReqMatch = 3,
    kReqCancelMatch = 4,
    kSangcharim = 5,
    kMovePawn = 6,
    kPassTurn = 7
  };
};

extern const std::map<int, const char*> _JgC2S_MessageType_VALUES_TO_NAMES;

struct JgS2C_MessageType {
  enum type {
    kUnknown = 0,
    kNtfTestString = 1,
    kLogin = 2,
    kChannelInfo = 3,
    kNtfMatch = 4,
    kCancelMatch = 5,
    kNtfSangcharimHan = 6,
    kNtfSangcharim = 7,
    kNtfChangeTurn = 8,
    kNtfMovePawn = 9
  };
};

extern const std::map<int, const char*> _JgS2C_MessageType_VALUES_TO_NAMES;

struct Sangcharim {
  enum type {
    kUnknown = 0,
    kSMSM = 1,
    kMSMS = 2,
    kMSSM = 3,
    kSMMS = 4
  };
};

extern const std::map<int, const char*> _Sangcharim_VALUES_TO_NAMES;

class UserInfo;

class NtfTestString;

class ReqLogin;

class AnsChannelInfo;

class AnsLogin;

class ReqChannelInfo;

class ReqMatch;

class NtfMatch;

class ReqCancelRequestMatch;

class AnsCancelRequestMatch;

class ReqSangcharim;

class NtfSangcharimHan;

class NtfSangcharim;

class ReqMovePawn;

class NtfChangeTurn;

class NtfMovePawn;

typedef struct _UserInfo__isset {
  _UserInfo__isset() : nickName(false), level(false), victoryCount(false), defeatCount(false) {}
  bool nickName :1;
  bool level :1;
  bool victoryCount :1;
  bool defeatCount :1;
} _UserInfo__isset;

class UserInfo {
 public:

  static const char* ascii_fingerprint; // = "9284B42FBE364FECA7AF8E76C1F488A2";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x84,0xB4,0x2F,0xBE,0x36,0x4F,0xEC,0xA7,0xAF,0x8E,0x76,0xC1,0xF4,0x88,0xA2};

  UserInfo(const UserInfo&);
  UserInfo& operator=(const UserInfo&);
  UserInfo() : nickName(), level(0), victoryCount(0), defeatCount(0) {
  }

  virtual ~UserInfo() throw();
  std::string nickName;
  int32_t level;
  int32_t victoryCount;
  int32_t defeatCount;

  _UserInfo__isset __isset;

  void __set_nickName(const std::string& val);

  void __set_level(const int32_t val);

  void __set_victoryCount(const int32_t val);

  void __set_defeatCount(const int32_t val);

  bool operator == (const UserInfo & rhs) const
  {
    if (!(nickName == rhs.nickName))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(victoryCount == rhs.victoryCount))
      return false;
    if (!(defeatCount == rhs.defeatCount))
      return false;
    return true;
  }
  bool operator != (const UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserInfo& obj);
};

void swap(UserInfo &a, UserInfo &b);

typedef struct _NtfTestString__isset {
  _NtfTestString__isset() : message(false) {}
  bool message :1;
} _NtfTestString__isset;

class NtfTestString {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NtfTestString(const NtfTestString&);
  NtfTestString& operator=(const NtfTestString&);
  NtfTestString() : message() {
  }

  virtual ~NtfTestString() throw();
  std::string message;

  _NtfTestString__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const NtfTestString & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NtfTestString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfTestString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfTestString& obj);
};

void swap(NtfTestString &a, NtfTestString &b);

typedef struct _ReqLogin__isset {
  _ReqLogin__isset() : userName(false), loginPlatform(false), deviceDesc(false) {}
  bool userName :1;
  bool loginPlatform :1;
  bool deviceDesc :1;
} _ReqLogin__isset;

class ReqLogin {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  ReqLogin(const ReqLogin&);
  ReqLogin& operator=(const ReqLogin&);
  ReqLogin() : userName(), loginPlatform(), deviceDesc() {
  }

  virtual ~ReqLogin() throw();
  std::string userName;
  std::string loginPlatform;
  std::string deviceDesc;

  _ReqLogin__isset __isset;

  void __set_userName(const std::string& val);

  void __set_loginPlatform(const std::string& val);

  void __set_deviceDesc(const std::string& val);

  bool operator == (const ReqLogin & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(loginPlatform == rhs.loginPlatform))
      return false;
    if (!(deviceDesc == rhs.deviceDesc))
      return false;
    return true;
  }
  bool operator != (const ReqLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqLogin& obj);
};

void swap(ReqLogin &a, ReqLogin &b);

typedef struct _AnsChannelInfo__isset {
  _AnsChannelInfo__isset() : count(false) {}
  bool count :1;
} _AnsChannelInfo__isset;

class AnsChannelInfo {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  AnsChannelInfo(const AnsChannelInfo&);
  AnsChannelInfo& operator=(const AnsChannelInfo&);
  AnsChannelInfo() : count(0) {
  }

  virtual ~AnsChannelInfo() throw();
  int32_t count;

  _AnsChannelInfo__isset __isset;

  void __set_count(const int32_t val);

  bool operator == (const AnsChannelInfo & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const AnsChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnsChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AnsChannelInfo& obj);
};

void swap(AnsChannelInfo &a, AnsChannelInfo &b);

typedef struct _AnsLogin__isset {
  _AnsLogin__isset() : loginOk(false), nickName(false), level(false), victoryCount(false), defeatCount(false), comment(false), channelInfo(false) {}
  bool loginOk :1;
  bool nickName :1;
  bool level :1;
  bool victoryCount :1;
  bool defeatCount :1;
  bool comment :1;
  bool channelInfo :1;
} _AnsLogin__isset;

class AnsLogin {
 public:

  static const char* ascii_fingerprint; // = "C818FDC709DC164E0E81F2A286246EFF";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x18,0xFD,0xC7,0x09,0xDC,0x16,0x4E,0x0E,0x81,0xF2,0xA2,0x86,0x24,0x6E,0xFF};

  AnsLogin(const AnsLogin&);
  AnsLogin& operator=(const AnsLogin&);
  AnsLogin() : loginOk(0), nickName(), level(0), victoryCount(0), defeatCount(0), comment() {
  }

  virtual ~AnsLogin() throw();
  bool loginOk;
  std::string nickName;
  int32_t level;
  int32_t victoryCount;
  int32_t defeatCount;
  std::string comment;
  AnsChannelInfo channelInfo;

  _AnsLogin__isset __isset;

  void __set_loginOk(const bool val);

  void __set_nickName(const std::string& val);

  void __set_level(const int32_t val);

  void __set_victoryCount(const int32_t val);

  void __set_defeatCount(const int32_t val);

  void __set_comment(const std::string& val);

  void __set_channelInfo(const AnsChannelInfo& val);

  bool operator == (const AnsLogin & rhs) const
  {
    if (!(loginOk == rhs.loginOk))
      return false;
    if (!(nickName == rhs.nickName))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(victoryCount == rhs.victoryCount))
      return false;
    if (!(defeatCount == rhs.defeatCount))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    if (__isset.channelInfo != rhs.__isset.channelInfo)
      return false;
    else if (__isset.channelInfo && !(channelInfo == rhs.channelInfo))
      return false;
    return true;
  }
  bool operator != (const AnsLogin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnsLogin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AnsLogin& obj);
};

void swap(AnsLogin &a, AnsLogin &b);


class ReqChannelInfo {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ReqChannelInfo(const ReqChannelInfo&);
  ReqChannelInfo& operator=(const ReqChannelInfo&);
  ReqChannelInfo() {
  }

  virtual ~ReqChannelInfo() throw();

  bool operator == (const ReqChannelInfo & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReqChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqChannelInfo& obj);
};

void swap(ReqChannelInfo &a, ReqChannelInfo &b);


class ReqMatch {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ReqMatch(const ReqMatch&);
  ReqMatch& operator=(const ReqMatch&);
  ReqMatch() {
  }

  virtual ~ReqMatch() throw();

  bool operator == (const ReqMatch & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReqMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqMatch& obj);
};

void swap(ReqMatch &a, ReqMatch &b);

typedef struct _NtfMatch__isset {
  _NtfMatch__isset() : localId(false) {}
  bool localId :1;
} _NtfMatch__isset;

class NtfMatch {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  NtfMatch(const NtfMatch&);
  NtfMatch& operator=(const NtfMatch&);
  NtfMatch() : localId(0) {
  }

  virtual ~NtfMatch() throw();
  int32_t localId;

  _NtfMatch__isset __isset;

  void __set_localId(const int32_t val);

  bool operator == (const NtfMatch & rhs) const
  {
    if (!(localId == rhs.localId))
      return false;
    return true;
  }
  bool operator != (const NtfMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfMatch& obj);
};

void swap(NtfMatch &a, NtfMatch &b);


class ReqCancelRequestMatch {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ReqCancelRequestMatch(const ReqCancelRequestMatch&);
  ReqCancelRequestMatch& operator=(const ReqCancelRequestMatch&);
  ReqCancelRequestMatch() {
  }

  virtual ~ReqCancelRequestMatch() throw();

  bool operator == (const ReqCancelRequestMatch & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReqCancelRequestMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqCancelRequestMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqCancelRequestMatch& obj);
};

void swap(ReqCancelRequestMatch &a, ReqCancelRequestMatch &b);


class AnsCancelRequestMatch {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  AnsCancelRequestMatch(const AnsCancelRequestMatch&);
  AnsCancelRequestMatch& operator=(const AnsCancelRequestMatch&);
  AnsCancelRequestMatch() {
  }

  virtual ~AnsCancelRequestMatch() throw();

  bool operator == (const AnsCancelRequestMatch & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AnsCancelRequestMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnsCancelRequestMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AnsCancelRequestMatch& obj);
};

void swap(AnsCancelRequestMatch &a, AnsCancelRequestMatch &b);

typedef struct _ReqSangcharim__isset {
  _ReqSangcharim__isset() : sangcharim(false) {}
  bool sangcharim :1;
} _ReqSangcharim__isset;

class ReqSangcharim {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  ReqSangcharim(const ReqSangcharim&);
  ReqSangcharim& operator=(const ReqSangcharim&);
  ReqSangcharim() : sangcharim((Sangcharim::type)0) {
  }

  virtual ~ReqSangcharim() throw();
  Sangcharim::type sangcharim;

  _ReqSangcharim__isset __isset;

  void __set_sangcharim(const Sangcharim::type val);

  bool operator == (const ReqSangcharim & rhs) const
  {
    if (!(sangcharim == rhs.sangcharim))
      return false;
    return true;
  }
  bool operator != (const ReqSangcharim &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSangcharim & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqSangcharim& obj);
};

void swap(ReqSangcharim &a, ReqSangcharim &b);

typedef struct _NtfSangcharimHan__isset {
  _NtfSangcharimHan__isset() : han(false) {}
  bool han :1;
} _NtfSangcharimHan__isset;

class NtfSangcharimHan {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  NtfSangcharimHan(const NtfSangcharimHan&);
  NtfSangcharimHan& operator=(const NtfSangcharimHan&);
  NtfSangcharimHan() : han((Sangcharim::type)0) {
  }

  virtual ~NtfSangcharimHan() throw();
  Sangcharim::type han;

  _NtfSangcharimHan__isset __isset;

  void __set_han(const Sangcharim::type val);

  bool operator == (const NtfSangcharimHan & rhs) const
  {
    if (!(han == rhs.han))
      return false;
    return true;
  }
  bool operator != (const NtfSangcharimHan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfSangcharimHan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfSangcharimHan& obj);
};

void swap(NtfSangcharimHan &a, NtfSangcharimHan &b);

typedef struct _NtfSangcharim__isset {
  _NtfSangcharim__isset() : cho(false), han(false) {}
  bool cho :1;
  bool han :1;
} _NtfSangcharim__isset;

class NtfSangcharim {
 public:

  static const char* ascii_fingerprint; // = "69EF77542FBF7A8DD68310C9FF3B44BD";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xEF,0x77,0x54,0x2F,0xBF,0x7A,0x8D,0xD6,0x83,0x10,0xC9,0xFF,0x3B,0x44,0xBD};

  NtfSangcharim(const NtfSangcharim&);
  NtfSangcharim& operator=(const NtfSangcharim&);
  NtfSangcharim() : cho((Sangcharim::type)0), han((Sangcharim::type)0) {
  }

  virtual ~NtfSangcharim() throw();
  Sangcharim::type cho;
  Sangcharim::type han;

  _NtfSangcharim__isset __isset;

  void __set_cho(const Sangcharim::type val);

  void __set_han(const Sangcharim::type val);

  bool operator == (const NtfSangcharim & rhs) const
  {
    if (!(cho == rhs.cho))
      return false;
    if (!(han == rhs.han))
      return false;
    return true;
  }
  bool operator != (const NtfSangcharim &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfSangcharim & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfSangcharim& obj);
};

void swap(NtfSangcharim &a, NtfSangcharim &b);

typedef struct _ReqMovePawn__isset {
  _ReqMovePawn__isset() : location(false), target(false) {}
  bool location :1;
  bool target :1;
} _ReqMovePawn__isset;

class ReqMovePawn {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  ReqMovePawn(const ReqMovePawn&);
  ReqMovePawn& operator=(const ReqMovePawn&);
  ReqMovePawn() : location(0), target(0) {
  }

  virtual ~ReqMovePawn() throw();
  int32_t location;
  int32_t target;

  _ReqMovePawn__isset __isset;

  void __set_location(const int32_t val);

  void __set_target(const int32_t val);

  bool operator == (const ReqMovePawn & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const ReqMovePawn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqMovePawn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReqMovePawn& obj);
};

void swap(ReqMovePawn &a, ReqMovePawn &b);

typedef struct _NtfChangeTurn__isset {
  _NtfChangeTurn__isset() : localId(false) {}
  bool localId :1;
} _NtfChangeTurn__isset;

class NtfChangeTurn {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  NtfChangeTurn(const NtfChangeTurn&);
  NtfChangeTurn& operator=(const NtfChangeTurn&);
  NtfChangeTurn() : localId(0) {
  }

  virtual ~NtfChangeTurn() throw();
  int32_t localId;

  _NtfChangeTurn__isset __isset;

  void __set_localId(const int32_t val);

  bool operator == (const NtfChangeTurn & rhs) const
  {
    if (!(localId == rhs.localId))
      return false;
    return true;
  }
  bool operator != (const NtfChangeTurn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfChangeTurn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfChangeTurn& obj);
};

void swap(NtfChangeTurn &a, NtfChangeTurn &b);

typedef struct _NtfMovePawn__isset {
  _NtfMovePawn__isset() : localId(false), location(false), target(false), dummy(false) {}
  bool localId :1;
  bool location :1;
  bool target :1;
  bool dummy :1;
} _NtfMovePawn__isset;

class NtfMovePawn {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  NtfMovePawn(const NtfMovePawn&);
  NtfMovePawn& operator=(const NtfMovePawn&);
  NtfMovePawn() : localId(0), location(0), target(0), dummy(0) {
  }

  virtual ~NtfMovePawn() throw();
  int32_t localId;
  int32_t location;
  int32_t target;
  int32_t dummy;

  _NtfMovePawn__isset __isset;

  void __set_localId(const int32_t val);

  void __set_location(const int32_t val);

  void __set_target(const int32_t val);

  void __set_dummy(const int32_t val);

  bool operator == (const NtfMovePawn & rhs) const
  {
    if (!(localId == rhs.localId))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(dummy == rhs.dummy))
      return false;
    return true;
  }
  bool operator != (const NtfMovePawn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NtfMovePawn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NtfMovePawn& obj);
};

void swap(NtfMovePawn &a, NtfMovePawn &b);

} // namespace

#endif
