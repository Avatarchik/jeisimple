/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "jangi_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace jangi {

int _kJgC2S_MessageTypeValues[] = {
  JgC2S_MessageType::kUnknown,
  JgC2S_MessageType::kLogin,
  JgC2S_MessageType::kChannelInfo,
  JgC2S_MessageType::kReqMatch,
  JgC2S_MessageType::kReqCancelMatch,
  JgC2S_MessageType::kSangcharim,
  JgC2S_MessageType::kMovePawn,
  JgC2S_MessageType::kPassTurn
};
const char* _kJgC2S_MessageTypeNames[] = {
  "kUnknown",
  "kLogin",
  "kChannelInfo",
  "kReqMatch",
  "kReqCancelMatch",
  "kSangcharim",
  "kMovePawn",
  "kPassTurn"
};
const std::map<int, const char*> _JgC2S_MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kJgC2S_MessageTypeValues, _kJgC2S_MessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kJgS2C_MessageTypeValues[] = {
  JgS2C_MessageType::kUnknown,
  JgS2C_MessageType::kNtfTestString,
  JgS2C_MessageType::kLogin,
  JgS2C_MessageType::kChannelInfo,
  JgS2C_MessageType::kNtfMatch,
  JgS2C_MessageType::kCancelMatch,
  JgS2C_MessageType::kNtfSangcharimHan,
  JgS2C_MessageType::kNtfSangcharim,
  JgS2C_MessageType::kNtfChangeTurn,
  JgS2C_MessageType::kNtfMovePawn
};
const char* _kJgS2C_MessageTypeNames[] = {
  "kUnknown",
  "kNtfTestString",
  "kLogin",
  "kChannelInfo",
  "kNtfMatch",
  "kCancelMatch",
  "kNtfSangcharimHan",
  "kNtfSangcharim",
  "kNtfChangeTurn",
  "kNtfMovePawn"
};
const std::map<int, const char*> _JgS2C_MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kJgS2C_MessageTypeValues, _kJgS2C_MessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSangcharimValues[] = {
  Sangcharim::kUnknown,
  Sangcharim::kSMSM,
  Sangcharim::kMSMS,
  Sangcharim::kMSSM,
  Sangcharim::kSMMS
};
const char* _kSangcharimNames[] = {
  "kUnknown",
  "kSMSM",
  "kMSMS",
  "kMSSM",
  "kSMMS"
};
const std::map<int, const char*> _Sangcharim_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSangcharimValues, _kSangcharimNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UserInfo::~UserInfo() throw() {
}


void UserInfo::__set_nickName(const std::string& val) {
  this->nickName = val;
}

void UserInfo::__set_level(const int32_t val) {
  this->level = val;
}

void UserInfo::__set_victoryCount(const int32_t val) {
  this->victoryCount = val;
}

void UserInfo::__set_defeatCount(const int32_t val) {
  this->defeatCount = val;
}

const char* UserInfo::ascii_fingerprint = "9284B42FBE364FECA7AF8E76C1F488A2";
const uint8_t UserInfo::binary_fingerprint[16] = {0x92,0x84,0xB4,0x2F,0xBE,0x36,0x4F,0xEC,0xA7,0xAF,0x8E,0x76,0xC1,0xF4,0x88,0xA2};

uint32_t UserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickName);
          this->__isset.nickName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->victoryCount);
          this->__isset.victoryCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defeatCount);
          this->__isset.defeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserInfo");

  xfer += oprot->writeFieldBegin("nickName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nickName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("victoryCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->victoryCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defeatCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->defeatCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserInfo &a, UserInfo &b) {
  using ::std::swap;
  swap(a.nickName, b.nickName);
  swap(a.level, b.level);
  swap(a.victoryCount, b.victoryCount);
  swap(a.defeatCount, b.defeatCount);
  swap(a.__isset, b.__isset);
}

UserInfo::UserInfo(const UserInfo& other0) {
  nickName = other0.nickName;
  level = other0.level;
  victoryCount = other0.victoryCount;
  defeatCount = other0.defeatCount;
  __isset = other0.__isset;
}
UserInfo& UserInfo::operator=(const UserInfo& other1) {
  nickName = other1.nickName;
  level = other1.level;
  victoryCount = other1.victoryCount;
  defeatCount = other1.defeatCount;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserInfo& obj) {
  using apache::thrift::to_string;
  out << "UserInfo(";
  out << "nickName=" << to_string(obj.nickName);
  out << ", " << "level=" << to_string(obj.level);
  out << ", " << "victoryCount=" << to_string(obj.victoryCount);
  out << ", " << "defeatCount=" << to_string(obj.defeatCount);
  out << ")";
  return out;
}


NtfTestString::~NtfTestString() throw() {
}


void NtfTestString::__set_message(const std::string& val) {
  this->message = val;
}

const char* NtfTestString::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t NtfTestString::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t NtfTestString::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfTestString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfTestString");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfTestString &a, NtfTestString &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

NtfTestString::NtfTestString(const NtfTestString& other2) {
  message = other2.message;
  __isset = other2.__isset;
}
NtfTestString& NtfTestString::operator=(const NtfTestString& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfTestString& obj) {
  using apache::thrift::to_string;
  out << "NtfTestString(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}


ReqLogin::~ReqLogin() throw() {
}


void ReqLogin::__set_userName(const std::string& val) {
  this->userName = val;
}

void ReqLogin::__set_loginPlatform(const std::string& val) {
  this->loginPlatform = val;
}

void ReqLogin::__set_deviceDesc(const std::string& val) {
  this->deviceDesc = val;
}

const char* ReqLogin::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t ReqLogin::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t ReqLogin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginPlatform);
          this->__isset.loginPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceDesc);
          this->__isset.deviceDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqLogin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqLogin");

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginPlatform", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->loginPlatform);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceDesc", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->deviceDesc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqLogin &a, ReqLogin &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.loginPlatform, b.loginPlatform);
  swap(a.deviceDesc, b.deviceDesc);
  swap(a.__isset, b.__isset);
}

ReqLogin::ReqLogin(const ReqLogin& other4) {
  userName = other4.userName;
  loginPlatform = other4.loginPlatform;
  deviceDesc = other4.deviceDesc;
  __isset = other4.__isset;
}
ReqLogin& ReqLogin::operator=(const ReqLogin& other5) {
  userName = other5.userName;
  loginPlatform = other5.loginPlatform;
  deviceDesc = other5.deviceDesc;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqLogin& obj) {
  using apache::thrift::to_string;
  out << "ReqLogin(";
  out << "userName=" << to_string(obj.userName);
  out << ", " << "loginPlatform=" << to_string(obj.loginPlatform);
  out << ", " << "deviceDesc=" << to_string(obj.deviceDesc);
  out << ")";
  return out;
}


AnsChannelInfo::~AnsChannelInfo() throw() {
}


void AnsChannelInfo::__set_count(const int32_t val) {
  this->count = val;
}

const char* AnsChannelInfo::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t AnsChannelInfo::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t AnsChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnsChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AnsChannelInfo");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AnsChannelInfo &a, AnsChannelInfo &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

AnsChannelInfo::AnsChannelInfo(const AnsChannelInfo& other6) {
  count = other6.count;
  __isset = other6.__isset;
}
AnsChannelInfo& AnsChannelInfo::operator=(const AnsChannelInfo& other7) {
  count = other7.count;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AnsChannelInfo& obj) {
  using apache::thrift::to_string;
  out << "AnsChannelInfo(";
  out << "count=" << to_string(obj.count);
  out << ")";
  return out;
}


AnsLogin::~AnsLogin() throw() {
}


void AnsLogin::__set_loginOk(const bool val) {
  this->loginOk = val;
}

void AnsLogin::__set_nickName(const std::string& val) {
  this->nickName = val;
}

void AnsLogin::__set_level(const int32_t val) {
  this->level = val;
}

void AnsLogin::__set_victoryCount(const int32_t val) {
  this->victoryCount = val;
}

void AnsLogin::__set_defeatCount(const int32_t val) {
  this->defeatCount = val;
}

void AnsLogin::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void AnsLogin::__set_channelInfo(const AnsChannelInfo& val) {
  this->channelInfo = val;
__isset.channelInfo = true;
}

const char* AnsLogin::ascii_fingerprint = "C818FDC709DC164E0E81F2A286246EFF";
const uint8_t AnsLogin::binary_fingerprint[16] = {0xC8,0x18,0xFD,0xC7,0x09,0xDC,0x16,0x4E,0x0E,0x81,0xF2,0xA2,0x86,0x24,0x6E,0xFF};

uint32_t AnsLogin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->loginOk);
          this->__isset.loginOk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickName);
          this->__isset.nickName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->victoryCount);
          this->__isset.victoryCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defeatCount);
          this->__isset.defeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channelInfo.read(iprot);
          this->__isset.channelInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnsLogin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AnsLogin");

  xfer += oprot->writeFieldBegin("loginOk", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->loginOk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nickName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("victoryCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->victoryCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defeatCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->defeatCount);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comment) {
    xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->comment);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelInfo) {
    xfer += oprot->writeFieldBegin("channelInfo", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->channelInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AnsLogin &a, AnsLogin &b) {
  using ::std::swap;
  swap(a.loginOk, b.loginOk);
  swap(a.nickName, b.nickName);
  swap(a.level, b.level);
  swap(a.victoryCount, b.victoryCount);
  swap(a.defeatCount, b.defeatCount);
  swap(a.comment, b.comment);
  swap(a.channelInfo, b.channelInfo);
  swap(a.__isset, b.__isset);
}

AnsLogin::AnsLogin(const AnsLogin& other8) {
  loginOk = other8.loginOk;
  nickName = other8.nickName;
  level = other8.level;
  victoryCount = other8.victoryCount;
  defeatCount = other8.defeatCount;
  comment = other8.comment;
  channelInfo = other8.channelInfo;
  __isset = other8.__isset;
}
AnsLogin& AnsLogin::operator=(const AnsLogin& other9) {
  loginOk = other9.loginOk;
  nickName = other9.nickName;
  level = other9.level;
  victoryCount = other9.victoryCount;
  defeatCount = other9.defeatCount;
  comment = other9.comment;
  channelInfo = other9.channelInfo;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AnsLogin& obj) {
  using apache::thrift::to_string;
  out << "AnsLogin(";
  out << "loginOk=" << to_string(obj.loginOk);
  out << ", " << "nickName=" << to_string(obj.nickName);
  out << ", " << "level=" << to_string(obj.level);
  out << ", " << "victoryCount=" << to_string(obj.victoryCount);
  out << ", " << "defeatCount=" << to_string(obj.defeatCount);
  out << ", " << "comment="; (obj.__isset.comment ? (out << to_string(obj.comment)) : (out << "<null>"));
  out << ", " << "channelInfo="; (obj.__isset.channelInfo ? (out << to_string(obj.channelInfo)) : (out << "<null>"));
  out << ")";
  return out;
}


ReqChannelInfo::~ReqChannelInfo() throw() {
}


const char* ReqChannelInfo::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ReqChannelInfo::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ReqChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqChannelInfo");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqChannelInfo &a, ReqChannelInfo &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReqChannelInfo::ReqChannelInfo(const ReqChannelInfo& other10) {
  (void) other10;
}
ReqChannelInfo& ReqChannelInfo::operator=(const ReqChannelInfo& other11) {
  (void) other11;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqChannelInfo& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ReqChannelInfo(";
  out << ")";
  return out;
}


ReqMatch::~ReqMatch() throw() {
}


const char* ReqMatch::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ReqMatch::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ReqMatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqMatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqMatch");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqMatch &a, ReqMatch &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReqMatch::ReqMatch(const ReqMatch& other12) {
  (void) other12;
}
ReqMatch& ReqMatch::operator=(const ReqMatch& other13) {
  (void) other13;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqMatch& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ReqMatch(";
  out << ")";
  return out;
}


NtfMatch::~NtfMatch() throw() {
}


void NtfMatch::__set_localId(const int32_t val) {
  this->localId = val;
}

const char* NtfMatch::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t NtfMatch::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t NtfMatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localId);
          this->__isset.localId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfMatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfMatch");

  xfer += oprot->writeFieldBegin("localId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->localId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfMatch &a, NtfMatch &b) {
  using ::std::swap;
  swap(a.localId, b.localId);
  swap(a.__isset, b.__isset);
}

NtfMatch::NtfMatch(const NtfMatch& other14) {
  localId = other14.localId;
  __isset = other14.__isset;
}
NtfMatch& NtfMatch::operator=(const NtfMatch& other15) {
  localId = other15.localId;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfMatch& obj) {
  using apache::thrift::to_string;
  out << "NtfMatch(";
  out << "localId=" << to_string(obj.localId);
  out << ")";
  return out;
}


ReqCancelRequestMatch::~ReqCancelRequestMatch() throw() {
}


const char* ReqCancelRequestMatch::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t ReqCancelRequestMatch::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t ReqCancelRequestMatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqCancelRequestMatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqCancelRequestMatch");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqCancelRequestMatch &a, ReqCancelRequestMatch &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReqCancelRequestMatch::ReqCancelRequestMatch(const ReqCancelRequestMatch& other16) {
  (void) other16;
}
ReqCancelRequestMatch& ReqCancelRequestMatch::operator=(const ReqCancelRequestMatch& other17) {
  (void) other17;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqCancelRequestMatch& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "ReqCancelRequestMatch(";
  out << ")";
  return out;
}


AnsCancelRequestMatch::~AnsCancelRequestMatch() throw() {
}


const char* AnsCancelRequestMatch::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t AnsCancelRequestMatch::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t AnsCancelRequestMatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnsCancelRequestMatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AnsCancelRequestMatch");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AnsCancelRequestMatch &a, AnsCancelRequestMatch &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AnsCancelRequestMatch::AnsCancelRequestMatch(const AnsCancelRequestMatch& other18) {
  (void) other18;
}
AnsCancelRequestMatch& AnsCancelRequestMatch::operator=(const AnsCancelRequestMatch& other19) {
  (void) other19;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AnsCancelRequestMatch& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "AnsCancelRequestMatch(";
  out << ")";
  return out;
}


ReqSangcharim::~ReqSangcharim() throw() {
}


void ReqSangcharim::__set_sangcharim(const Sangcharim::type val) {
  this->sangcharim = val;
}

const char* ReqSangcharim::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t ReqSangcharim::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t ReqSangcharim::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->sangcharim = (Sangcharim::type)ecast20;
          this->__isset.sangcharim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqSangcharim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqSangcharim");

  xfer += oprot->writeFieldBegin("sangcharim", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->sangcharim);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqSangcharim &a, ReqSangcharim &b) {
  using ::std::swap;
  swap(a.sangcharim, b.sangcharim);
  swap(a.__isset, b.__isset);
}

ReqSangcharim::ReqSangcharim(const ReqSangcharim& other21) {
  sangcharim = other21.sangcharim;
  __isset = other21.__isset;
}
ReqSangcharim& ReqSangcharim::operator=(const ReqSangcharim& other22) {
  sangcharim = other22.sangcharim;
  __isset = other22.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqSangcharim& obj) {
  using apache::thrift::to_string;
  out << "ReqSangcharim(";
  out << "sangcharim=" << to_string(obj.sangcharim);
  out << ")";
  return out;
}


NtfSangcharimHan::~NtfSangcharimHan() throw() {
}


void NtfSangcharimHan::__set_han(const Sangcharim::type val) {
  this->han = val;
}

const char* NtfSangcharimHan::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t NtfSangcharimHan::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t NtfSangcharimHan::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->han = (Sangcharim::type)ecast23;
          this->__isset.han = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfSangcharimHan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfSangcharimHan");

  xfer += oprot->writeFieldBegin("han", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->han);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfSangcharimHan &a, NtfSangcharimHan &b) {
  using ::std::swap;
  swap(a.han, b.han);
  swap(a.__isset, b.__isset);
}

NtfSangcharimHan::NtfSangcharimHan(const NtfSangcharimHan& other24) {
  han = other24.han;
  __isset = other24.__isset;
}
NtfSangcharimHan& NtfSangcharimHan::operator=(const NtfSangcharimHan& other25) {
  han = other25.han;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfSangcharimHan& obj) {
  using apache::thrift::to_string;
  out << "NtfSangcharimHan(";
  out << "han=" << to_string(obj.han);
  out << ")";
  return out;
}


NtfSangcharim::~NtfSangcharim() throw() {
}


void NtfSangcharim::__set_cho(const Sangcharim::type val) {
  this->cho = val;
}

void NtfSangcharim::__set_han(const Sangcharim::type val) {
  this->han = val;
}

const char* NtfSangcharim::ascii_fingerprint = "69EF77542FBF7A8DD68310C9FF3B44BD";
const uint8_t NtfSangcharim::binary_fingerprint[16] = {0x69,0xEF,0x77,0x54,0x2F,0xBF,0x7A,0x8D,0xD6,0x83,0x10,0xC9,0xFF,0x3B,0x44,0xBD};

uint32_t NtfSangcharim::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->cho = (Sangcharim::type)ecast26;
          this->__isset.cho = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->han = (Sangcharim::type)ecast27;
          this->__isset.han = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfSangcharim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfSangcharim");

  xfer += oprot->writeFieldBegin("cho", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->cho);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("han", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->han);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfSangcharim &a, NtfSangcharim &b) {
  using ::std::swap;
  swap(a.cho, b.cho);
  swap(a.han, b.han);
  swap(a.__isset, b.__isset);
}

NtfSangcharim::NtfSangcharim(const NtfSangcharim& other28) {
  cho = other28.cho;
  han = other28.han;
  __isset = other28.__isset;
}
NtfSangcharim& NtfSangcharim::operator=(const NtfSangcharim& other29) {
  cho = other29.cho;
  han = other29.han;
  __isset = other29.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfSangcharim& obj) {
  using apache::thrift::to_string;
  out << "NtfSangcharim(";
  out << "cho=" << to_string(obj.cho);
  out << ", " << "han=" << to_string(obj.han);
  out << ")";
  return out;
}


ReqMovePawn::~ReqMovePawn() throw() {
}


void ReqMovePawn::__set_location(const int32_t val) {
  this->location = val;
}

void ReqMovePawn::__set_target(const int32_t val) {
  this->target = val;
}

const char* ReqMovePawn::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t ReqMovePawn::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t ReqMovePawn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target);
          this->__isset.target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqMovePawn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReqMovePawn");

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReqMovePawn &a, ReqMovePawn &b) {
  using ::std::swap;
  swap(a.location, b.location);
  swap(a.target, b.target);
  swap(a.__isset, b.__isset);
}

ReqMovePawn::ReqMovePawn(const ReqMovePawn& other30) {
  location = other30.location;
  target = other30.target;
  __isset = other30.__isset;
}
ReqMovePawn& ReqMovePawn::operator=(const ReqMovePawn& other31) {
  location = other31.location;
  target = other31.target;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReqMovePawn& obj) {
  using apache::thrift::to_string;
  out << "ReqMovePawn(";
  out << "location=" << to_string(obj.location);
  out << ", " << "target=" << to_string(obj.target);
  out << ")";
  return out;
}


NtfChangeTurn::~NtfChangeTurn() throw() {
}


void NtfChangeTurn::__set_localId(const int32_t val) {
  this->localId = val;
}

const char* NtfChangeTurn::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t NtfChangeTurn::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t NtfChangeTurn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localId);
          this->__isset.localId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfChangeTurn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfChangeTurn");

  xfer += oprot->writeFieldBegin("localId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->localId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfChangeTurn &a, NtfChangeTurn &b) {
  using ::std::swap;
  swap(a.localId, b.localId);
  swap(a.__isset, b.__isset);
}

NtfChangeTurn::NtfChangeTurn(const NtfChangeTurn& other32) {
  localId = other32.localId;
  __isset = other32.__isset;
}
NtfChangeTurn& NtfChangeTurn::operator=(const NtfChangeTurn& other33) {
  localId = other33.localId;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfChangeTurn& obj) {
  using apache::thrift::to_string;
  out << "NtfChangeTurn(";
  out << "localId=" << to_string(obj.localId);
  out << ")";
  return out;
}


NtfMovePawn::~NtfMovePawn() throw() {
}


void NtfMovePawn::__set_localId(const int32_t val) {
  this->localId = val;
}

void NtfMovePawn::__set_location(const int32_t val) {
  this->location = val;
}

void NtfMovePawn::__set_target(const int32_t val) {
  this->target = val;
}

void NtfMovePawn::__set_dummy(const int32_t val) {
  this->dummy = val;
}

const char* NtfMovePawn::ascii_fingerprint = "154BB42C2FFD70F8B3993568C50C5613";
const uint8_t NtfMovePawn::binary_fingerprint[16] = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

uint32_t NtfMovePawn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localId);
          this->__isset.localId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target);
          this->__isset.target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dummy);
          this->__isset.dummy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NtfMovePawn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NtfMovePawn");

  xfer += oprot->writeFieldBegin("localId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->localId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dummy", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dummy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NtfMovePawn &a, NtfMovePawn &b) {
  using ::std::swap;
  swap(a.localId, b.localId);
  swap(a.location, b.location);
  swap(a.target, b.target);
  swap(a.dummy, b.dummy);
  swap(a.__isset, b.__isset);
}

NtfMovePawn::NtfMovePawn(const NtfMovePawn& other34) {
  localId = other34.localId;
  location = other34.location;
  target = other34.target;
  dummy = other34.dummy;
  __isset = other34.__isset;
}
NtfMovePawn& NtfMovePawn::operator=(const NtfMovePawn& other35) {
  localId = other35.localId;
  location = other35.location;
  target = other35.target;
  dummy = other35.dummy;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NtfMovePawn& obj) {
  using apache::thrift::to_string;
  out << "NtfMovePawn(";
  out << "localId=" << to_string(obj.localId);
  out << ", " << "location=" << to_string(obj.location);
  out << ", " << "target=" << to_string(obj.target);
  out << ", " << "dummy=" << to_string(obj.dummy);
  out << ")";
  return out;
}

} // namespace
